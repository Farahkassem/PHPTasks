<!-- Question 01 -->

<!-- 
    what is the output 
    $somerar = 15;
    function aditt(){
        global $somerar;
        $somerar++;
        echo "somerar is $somerar";
    }
    aditt()

    // answer is 16
 -->


 <!-- 
    what is the output 
        $arr = array(5=> 1, 12 =>2);
        $arr [] = 56;
        $arr["x"] = 42;
        unset($arr);
        echo var_dump($arr);

        // answer is null
            after the unset($arr) => the array will no longer exist
  -->


    <!-- 
        what is the output 
        $var = 'false';
        if($var){
            echo 'true';
        }else{
            echo 'false';
        }

        // answer is true
     -->

     <!-- question 02 -->

     <!-- 
        1.Fibonacci series

        function fibonacci($num) {
            $fib = array();
            $fib[0] = 0;
            $fib[1] = 1;
            
            for ($i = 2; $i < $num; $i++) {
                $fib[$i] = $fib[$i - 1] + $fib[$i - 2];
            }
            
            return $fib;
        }
      -->


      <!-- 
        2.How do you check if a year is leap or not?

        function isLeapYear($year) {
            if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
                return true;
            } else {
                return false;
            }
        }
       -->

       <!-- 
            3.Write a PHP script to generate unique random numbers within a range
            
            function generateUniqueRandomNumbers($min, $max, $count) {
                if ($count > ($max - $min + 1)) {
                    return false; // Unable to generate unique numbers if count exceeds range
                }

                $numbers = range($min, $max);
                shuffle($numbers);

                return array_slice($numbers, 0, $count);
            }
        -->
        <!-- 
            4.Write a PHP program to print out the multiplication table upto 5*5 
            
                for ($j = 1; $j <= 5; $j++) {
                    $result = $i * $j;
                    echo "$i x $j = $result\t";
                }
                echo "\n";
            }
        -->

        <!-- 
            5.Write a PHP program to remove duplicates from a sorted list

            function removeDuplicates($sortedList) {
                $length = count($sortedList);

                if ($length <= 1) {
                    return $sortedList;
                }

                $uniqueList = array($sortedList[0]);

                for ($i = 1; $i < $length; $i++) {
                    if ($sortedList[$i] != $sortedList[$i - 1]) {
                        $uniqueList[] = $sortedList[$i];
                    }
                }

                return $uniqueList;
            }
     -->

     <!-- 
        6. classes

        class Animal{
            private string $name;

            public function __construct(string $name){
                $this->name = $name;
            }

            public function __toString(): string{
                return "animal[name=\"{$this->name}\"]";
            }

        }

        class Cat extends Animal{

            public function __construct(string $name){
                parent::__construct($name);
            }
            public greet(): string{
                return "meow";
            }
        }

        class Dog extends Animal{

            public function __construct(string $name){
                parent::__construct($name);
            }
            public greet(): string{
                return "woooof";
            }
        }
      -->

     <!-- question 03 -->
     <!-- 
        1- Dynamic binding is being used for overloaded methods and Static binding is being used for overridden/overriding method.
        // answer is true
        2- Abstract Method Cannot Be Inherited
        // answer is false
        3- Abstraction means hiding the internal details or mechanics of how an object does something
        // answer is true
        4- Traits are a mechanism for code reuse in single inheritance languages
        // answer is true
        5- Static functions are associated with the class, not an instance of the class. 
        // answer is true
      -->
